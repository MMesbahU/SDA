# function to save plots
#
mysave <- function(name, p){
if(args$dest != ""){
args$dest = paste0(args$dest, "/")
file = paste0(args$dest, name)
ggsave(file, plot = p,  width = w, height = h, units = "cm")
# save as an svg as well
svg(paste0(file, ".svg"), width = w/2, height = h/2)
print(p)
dev.off()
}
}
#
# this funciton calcualtes overlap between two data frames with columns chr, start, end
#
perIDfromSegdups <- function(rangesA, rangesB){
ranges <- merge(rangesA,rangesB,by="chr",suffixes=c("A","B"))
for( x in c("startA", "startB", "endA", "endB")){
ranges[[x]] = as.numeric(as.character(ranges[[x]]))
}
postions =  (ranges$startB > ranges$startA & ranges$startB < ranges$endA ) |
(ranges$endB > ranges$startA & ranges$endB < ranges$endA ) |
(ranges$startB < ranges$startA & ranges$endB > ranges$endA )
ranges = ranges[postions,]
ranges <- transform(ranges, start = pmax(startA, startB))
ranges <- transform(ranges, end = pmin(endA, endB))
ranges <- transform(ranges, overlap = end - start)
return(ranges)
}
#
# this is a function to read in collapsed and uncollapsed segdups
#
readIn <- function(filename, name){
df=read.table(filename, sep ="\t", header = F)
colnames(df) = c("chr", "start", "end", "averagePerID")
df$start=as.numeric(df$start)
df$end=as.numeric(df$end)
df$aveRefLen=df$end-df$start
df$averagePerID[df$averagePerID >= 100.0] = 99.999999
df$Status=rep(name, length(df$aveRefLen))
return(df)
}
resolved = readIn(args$resolved,"resolved")
head(resolved)
unresolved = readIn(args$unresolved, "unresolved")
head(unresolved)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
all$totalPSVs
all
View(all)
# remove multiple instances of the header
lines <- readLines(args$tsv)
header = lines[1]
these = !grepl("collapse", lines)
lines = lines[ these ]
lines = c(header, lines)
length(lines)
all = read.table(text=lines, sep ="\t", header = T, stringsAsFactors=FALSE)
setDT(all)
# convert to percentage vs fraciton
all$bestPerID = all$perID_by_matches
sum(all$Status == "Diverged")
sum(all$Status == "Resolved")
dim(all)
cat all$Status
all$Status
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
p0
library(Cairo) # not  working at work
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
require('sharp')
install.packages('sharp')
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
install.packages("cairo")
install.packages("Cairo")
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
'/home/mrvollger/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/betterBlasrMap/highID.bed'
refdir = "~/Desktop/work/assemblies/hg38/"
asmdir = "~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/"
segdir = "~/Desktop/work/assemblies/CHM1/GCA_001297185.1_PacBioCHM1_r2_GenBank_08312015/Segdups/"
# read in all segdups, unmerged
file = paste0(refdir, "ucsc.unmerged.segdups.bed")
segdups = read.table(file, header=F)
names(segdups) = c(bedform, "perID")
segdups = makeGRangesFromDataFrame(segdups, ignore.strand = T, keep.extra.columns = T)
segdups.color = "#000000"
# read in high ID sequences
file = paste0(asmdir, "betterBlasrMap/highID.bed" )
highid = read.table(file, header=F)
names(highid) = c(bedform, "perID")
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
warnings()
library(ggplot2)
library(scales)
library(RColorBrewer)
library(plyr)
library(gridExtra)
library(ggrepel)
library(grid)
library(gtable)
#source("https://bioconductor.org/biocLite.R")
#biocLite("karyoploteR")
library(karyoploteR)
library(GenomicRanges)
bedform = c("chr", "start", "end")
refdir = "~/Desktop/work/assemblies/hg38/"
asmdir = "~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/"
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
warings()
warning()
warnings()
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
warnings()
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
install.packages("Cairo")
install.packages("Cairo")
library(Cairo)
#!/usr/bin/env Rscript
#lib="/home/mrvollger/anaconda3/lib/R/library"
#.libPaths(lib)
#.libPaths( c( .libPaths(), lib ))
library(Cairo)
library(Cairo)
library(ggplot2)
library(plyr)
require(gridExtra)
require(scales)
library(RColorBrewer)
library(reshape2)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(stringr)
library(data.table)
library(networkD3)
library(bedr)
library(bedr)
library(evaluate)
require(gridExtra)
library(ggplot2)
library(scales)
library(RColorBrewer)
library(plyr)
library(gridExtra)
library(ggrepel)
library(grid)
library(gtable)
library(karyoploteR)
library(karyoploteR)
library(GenomicRanges)
bedform = c("chr", "start", "end")
library(karyoploteR)
library(karyoploteR)
library(GenomicRanges)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("karyoploteR")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("karyoploteR")
install.packages(bit64)
install.packages('bit64')
library(karyoploteR)
library(karyoploteR)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2//LocalAssemblies/all.ref.fasta.fai")
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/all.ref.fasta.fai")
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/all.ref.fasta.fai")
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/all.ref.fasta.fai")
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/all.ref.fasta.fai")
fai = read.table("~/Desktop/data/genomeWide/Mitchell_CHM1_V2/LocalAssemblies/all.ref.fasta.fai")
names(fai) = c("Collapse","Collapse Length","b","a")
fai[["Collapse Length"]][ fai[["Collapse Length"]] > 150000 ] = 150000
p8 = ggplot(fai, aes(x=fai[["Collapse Length"]] )) + geom_histogram(alpha=0.8, fill="black", binwidth=3000)  + scale_fill_manual(values=col4) +
scale_x_continuous(labels = comma, breaks = seq(0, 150000, by = 25000) ) +
xlab("Collapse length (bp)") + ylab("Counts")+ myTheme
p8
mysave("CollapseLength.pdf", p8)
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
df$bestPerID[is.na(df$bestPerID)] = 0
df$Length[is.na(df$Length)] = 0
for(perID in names(counts)){
x = df[ df$bestPerID == perID, "Length" ]
counts[perID] = counts[perID] + sum(x)
}
for(perID in names(counts)){
x = df[ df$bestPerID == perID, "Length" ]
counts[perID] = counts[perID] + sum(x)
}
ID = unique(dfs$bestPerID)
counts = rep(0, length(ID))
names(counts)=ID
for(perID in names(counts)){
x = df[ df$bestPerID == perID, "Length" ]
counts[perID] = counts[perID] + sum(x)
}
bestPerId
df$bestPerID
source('~/Desktop/work/projects/abp/PlotFilterBySizeAndRepeatContent2.R', echo=TRUE)
p8 = ggplot(dfs, aes(x=Length, fill=Status)) + geom_density(alpha=0.8)  + scale_fill_manual(values=col4) +
scale_x_continuous(labels = comma, breaks = round(seq(min(df$Length), max(df$Length), by = 25000),1)) +
theme(axis.text.y = element_blank()) +
xlab("Assembly length (bp)") + ylab("Density")+ myTheme
df$Length
View(all)
View(df)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
stop("End of ideogram plots")
warning("End of ideogram plots")
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
warning("End of ideogram plots", call.=F)
stop("End of ideogram plots", call.=F)
stop("End of ideogram plots", call.=F)
plotsdir = sprintf( "~/Desktop/data/genomeWide/%s/plots/", genome)
plotsdir
dir.create(plotsdir)
?dir.create
dir.exists()
if( ! dir.exists(plotsdir)){
dir.create(plotsdir)
}
if( ! dir.exists(plotsdir)){
dir.create(paste0(plotsdir, "ideogram"))
}
if( ! dir.exists(plotsdir)){
dir.create(plotsdir)
}
if(! dir.exists(paste0(plotsdir, "ideogram")) ){
dir.create(paste0(plotsdir, "ideogram"))
}
library(Cairo)
library(ggplot2)
library(plyr)
require(gridExtra)
require(scales)
library(RColorBrewer)
library(reshape2)
library(tidyr)
library(dplyr)
library(splitstackshape)
library(stringr)
library(data.table)
library(bedr)
library(evaluate)
suppressPackageStartupMessages(library("argparse"))
genome = "Mitchell_CHM13_V2"
genome = "Yoruban"
genome = "Mitchell_CHM1"
genome = "Mitchell_CHM1_V2"
faifile = sprintf("~/Desktop/data/genomeWide/%s/LocalAssemblies/all.ref.fasta.fai", genome)
res <- Sys.glob(sprintf("~/Desktop/data/genomeWide/%s/segdups/*.mean.resolved", genome) )[1]
unr <- Sys.glob(sprintf("~/Desktop/data/genomeWide/%s/segdups/*.mean.unresolved", genome) )[1]
res <- Sys.glob(sprintf("~/Desktop/work/assemblies/CHM1/GCA_001297185.1_PacBioCHM1_r2_GenBank_08312015/Segdups/asm.resolved", genome) )[1]
unr <- Sys.glob(sprintf("~/Desktop/work/assemblies/CHM1/GCA_001297185.1_PacBioCHM1_r2_GenBank_08312015/Segdups/asm.unresolved", genome) )[1]
tsv = sprintf("~/Desktop/data/genomeWide/%s/LocalAssemblies/localAssemblyStats.tsv", genome)
des = sprintf("~/Desktop/data/genomeWide/%s/plots/", genome)
parser <- ArgumentParser()
parser$add_argument("-t", "--tsv", default=tsv, help="Input tsv file")
parser$add_argument("-o", "--dest", default=des, help="destination folder")
parser$add_argument("-r", "--resolved", default=res, help="list of resolved seg dups")
parser$add_argument("-u", "--unresolved", default=unr, help=" list of unresolved seg dups")
args <- parser$parse_args()
args
args$dest
if( ! dir.exists(args$dest)){
dir.create(args$dest)
}
parser <- ArgumentParser()
parser$add_argument("-r", "--refdir", default=refdir, help="Input tsv file")
parser$add_argument("-a", "--asmdir", default=asmdir, help="destination folder")
parser$add_argument("-s", "--segdir", default=segdir, help="list of resolved seg dups")
parser$add_argument("-p", "--plotsdir", default=plotsdir, help=" list of unresolved seg dups")
args <- parser$parse_args()
args
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/mapDivergedToClonesPlots.R', echo=TRUE)
source('~/Desktop/work/projects/abp/SummaryPlots.R', echo=TRUE)
source('~/Desktop/work/projects/abp/SummaryPlots.R', echo=TRUE)
source('~/Desktop/work/projects/abp/SummaryPlots.R', echo=TRUE)
plots[1]
plots[2]
plots2[1]
plots2[2]
plots[1]
plots[2]
plots2[1]
plots2[2]
genome = "CHM13"
refdir = "~/Desktop/work/assemblies/hg38/"
asmdir = sprintf("~/Desktop/data/genomeWide/%s/LocalAssemblies/", genome)
segdir = "~/Desktop/work/assemblies/CHM1/GCA_001297185.1_PacBioCHM1_r2_GenBank_08312015/Segdups/"
segdir <- Sys.glob(sprintf("~/Desktop/work/assemblies/%s/*/Segdups/asm.resolved", genome) )[1]
segdir
segdir <- Sys.glob(sprintf("~/Desktop/work/assemblies/%s/*/Segdups/", genome) )[1]
segdir
agrep
Sys.glob(sprintf("~/Desktop/work/assemblies/%s/*/Segdups/asm.resolved", genome) )
Sys.glob(sprintf("~/Desktop/work/assemblies/*/*/Segdups/asm.resolved", genome) )
x = Sys.glob(sprintf("~/Desktop/work/assemblies/*/*/Segdups/asm.resolved", genome) )
agrep("CHM13", x)
?agrep
stringdist
? stringdist
library(stringdist)
amatch(string, stringVector, maxDist=Inf)
library(stringdist)
library(stringdist)
amatch(string, stringVector, maxDist=Inf)
amatch(genome, x, maxDist=Inf)
Sys.glob(sprintf("~/Desktop/data/genomeWide/%s/segdups/")
)
Sys.glob("~/Desktop/data/genomeWide/*/segdups/")
Sys.glob("~/Desktop/work/assemblies/*/*/Segdups/")
segdirs = Sys.glob("~/Desktop/work/assemblies/*/*/Segdups/")
segdir = segdirs[amatch(genome, segdirs )]
segdir
amatch(genome, segdirs )
segdir = segdirs[amatch(genome, segdirs , maxDist=Inf)]
segdirs = Sys.glob("~/Desktop/work/assemblies/*/*/Segdups/")
segdir = segdirs[amatch(genome, segdirs , maxDist=Inf)]
segdir
res <- paste0(segdir, "asm.resolved")
unr <- paste0(segdir, "asm.unresolved")
segdir
res <- paste0(segdir, "asm.resolved")
unr <- paste0(segdir, "asm.unresolved")
genome = "Mitchell_CHM1_V2"
segdirs = Sys.glob("~/Desktop/work/assemblies/*/*/Segdups/")
segdir = segdirs[amatch(genome, segdirs , maxDist=Inf)]
res <- paste0(segdir, "asm.resolved")
unr <- paste0(segdir, "asm.unresolved")
unr
segdirs
amatch(genome, segdirs , maxDist=Inf)
genome
amatch("GCA_00129", segdirs , maxDist=Inf)
amatch("GCA_001297185.1_PacBioCHM1_r2_GenBank_08312015", segdirs , maxDist=Inf)
segdirs = Sys.glob(sprintf("~/Desktop/work/assemblies/%s/*/Segdups/", genome))
res <- paste0(segdir, "asm.resolved")
unr <- paste0(segdir, "asm.unresolved")
res
segdirs = Sys.glob(sprintf("~/Desktop/work/assemblies/%s/*/Segdups/", genome))[1]
res <- paste0(segdir, "asm.resolved")
unr <- paste0(segdir, "asm.unresolved")
res
source('~/Desktop/work/projects/abp/SummaryPlots.R', echo=TRUE)
source('~/Desktop/work/projects/abp/mapDivergedToClonesPlots.R', echo=TRUE)
genome = "Mitchell_CHM1_V2"
genome = "CHM13"
asmdir = sprintf("~/Desktop/data/genomeWide/%s/LocalAssemblies/", genome)
refdir = "~/Desktop/work/assemblies/hg38/"
plotsdir = sprintf( "~/Desktop/data/genomeWide/%s/plots/", genome)
if( ! dir.exists(plotsdir)){
dir.create(plotsdir)
}
parser <- ArgumentParser()
parser$add_argument("-r", "--refdir", default=refdir, help="Input tsv file")
parser$add_argument("-a", "--asmdir", default=asmdir, help="destination folder")
parser$add_argument("-p", "--plotsdir", default=plotsdir, help=" list of unresolved seg dups")
args <- parser$parse_args()
refdir = args$refdir
asmdir = args$asmdir
segdir = args$segdir
plotsdir = args$plotsdir
file = paste0(refdir, "careAboutGenes.txt")
importantGenes = read.table(file, header=F)
geneRegex = paste(importantGenes$V1, collapse = '|')
geneRegex
m=1
h=15*m
w=25*m
col2=c("#b20000","#000000")
names(col2) <- (c(FALSE, TRUE))
mysave <- function(name, p){
ggsave(name, plot = p,  width = w, height = h, units = "cm")
}
file = paste0(asmdir, "betterBlasrMap/clonemapped.pd")
mapped = read.table(file, header=T)
mapped$clonePerID = mapped$perID_by_matches
mapped$length = mapped$query_end - mapped$query_start
mapped$referenceLength = mapped$bestEnd - mapped$bestStart
mapped$validated = FALSE
mapped[mapped$clonePerID >= 99.8 & mapped$referencePerID <= 99.8 & mapped$frac_in_aln >= 0.9,
]$validated = TRUE
summary(mapped[mapped$validated, "length"])
sum(mapped$validated)
bot = 95
top = 100
plots = list()
plots[[1]] =  ggplot(mapped) + geom_point(aes(length, clonePerID, color=validated))
plots[[2]] = ggplot(mapped) + geom_point(aes(referenceLength, referencePerID, color=validated))
plots[[3]] = ggplot(mapped) + geom_point(aes(referencePerID, clonePerID, color = validated)) +
coord_cartesian(xlim=c(bot,top), ylim = c(bot,top)) +
geom_abline(intercept = 0, slope = 1)
validated = mapped[mapped$validated,]
file2 = paste0(asmdir, "betterBlasrMap/validated.genes.bed")
genes = read.table(file2, header=F)
genes = genes[, c("V4", "V7")]
colnames(genes) = c("query_name", "Gene")
genes = genes[grep("LOC", genes$Gene, invert=TRUE),]
genes <- ddply(genes, .(query_name), summarize,
Gene=paste(unique(Gene),collapse=", ") )
valGenes = merge(validated, genes, by="query_name", all.x=T)
valGenes = valGenes[order(valGenes$referencePerID), ]
valGenes$ID = NA
valGenes$GeneShow = NA
counter = 1
maxShownGenes = 15
for(i in 1:length(valGenes$Gene)){
if( counter <= maxShownGenes & !is.na(valGenes[i,]$Gene) ){
valGenes[i,]$ID = as.character(counter)
valGenes[i,]$GeneShow = valGenes[i,]$Gene
counter = counter + 1
}
else if(grepl(geneRegex, valGenes[i,]$Gene)){ # prints if evan thinks it is an important gene
print(valGenes[i,]$Gene)
valGenes[i,]$ID = as.character(counter)
valGenes[i,]$GeneShow = valGenes[i,]$Gene
counter = counter + 1
}
}
valGenes$ID
mysize = 3
plots[[4]] = ggplot(valGenes) +
geom_segment(aes(x=referenceLength, xend=length, y=referencePerID, yend=clonePerID), alpha = 0.25, color="blue") +
geom_point(aes(x=referenceLength, y=referencePerID), color=col2[[1]], size=mysize) +
geom_point(aes(x=length, y=clonePerID), color=col2[[2]], size=mysize) +
geom_label_repel(aes(x=referenceLength, y=referencePerID, label=ID),
size=mysize, color="black", fontface="bold",
arrow = arrow(length = unit(0.005, 'npc')),
point.padding = .25,
box.padding = .5,
#ylim=c(NA, 99.8),
segment.size = 0.5) +
xlab("Alignmnet Length (bp)") +
ylab("Percent Identity") +
coord_cartesian(ylim = c(bot+2.3,top))
for(i in 1:length(plots)){
plots[[i]] = plots[[i]] + theme_classic() +
scale_x_continuous(labels = comma) +
scale_color_manual(values=col2) +
theme(plot.margin=unit(c(1,1,1,1),"cm"))
fname = paste0(plotsdir, paste0(i, ".all.pdf"))
#mysave(fname, plots[[i]])
}
(
(
show = valGenes[!is.na(valGenes$ID), c("ID", "Gene", "clonePerID")]
show$clonePerID = format(round(show$clonePerID, 2), nsmall = 2)
names(show) <- c("Label", "Gene(s)", "% ID")
show = valGenes[!is.na(valGenes$ID), c("ID", "Gene", "clonePerID")]
show$clonePerID = format(round(show$clonePerID, 2), nsmall = 2)
names(show) <- c("Label", "Gene(s)", "% ID")
mycolors = c( rep("#FFFFFF", maxShownGenes), rep("#e9e9e9", counter - maxShownGenes))
tsize = 0.4
counter - maxShownGenes
valGenes
ls
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/mapDivergedToClonesPlots.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/ideogram_final_figures.R', echo=TRUE)
source('~/Desktop/work/projects/abp/SummaryPlots.R', echo=TRUE)
